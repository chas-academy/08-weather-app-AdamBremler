{"version":3,"sources":["img/arrow-down.svg","img/arrow-up.svg","img/close.svg","img/humidity.svg","img/wind-speed.svg","img/loading.gif","img sync /^/.//.*/.svg$","img/clear-day.svg","img/clear-night.svg","img/cloudy.svg","img/fog.svg","img/partly-cloudy-day.svg","img/partly-cloudy-night.svg","img/rain.svg","img/sleet.svg","img/snow.svg","img/wind.svg","nav/NavContainer.js","nav/NavFormContainer.js","nav/NavSearchFormGroup.js","nav/NavButton.js","nav/NavInput.js","hooks/useFetch.js","nav/NavSearchForm.js","hooks/useForwardGeo.js","nav/NavUnitSwitchContainer.js","nav/NavUnitSwitch.js","nav/Nav.js","weather/WeatherContainer.js","weather/WeatherInnerContainer.js","weather/WeatherCard.js","weather/WeatherHeader.js","weather/WeatherBody.js","weather/WeatherIcon.js","weather/WeatherIconContainer.js","weather/WeatherMiscContainer.js","weather/WeatherInfoContainer.js","common/InlineWrapper.js","weather/WeatherProgressContainer.js","weather/WeatherProgressBar.js","weather/WeatherProgress.js","weather/WeatherInfoHorizontalListContainer.js","weather/WeatherInfoHorizontalList.js","weather/WeatherInfoHorizontalListItem.js","weather/WeatherInfoList.js","weather/WeatherInfoListItem.js","weather/WeatherListIconContainer.js","common/SmallDiv.js","weather/WeatherInfoContent.js","weather/WeatherMiscContent.js","weather/WeatherBodyDay.js","weather/WeatherRemoveButton.js","weather/WeatherRemoveButtonContainer.js","loading/LoadingContainer.js","loading/Loading.js","weather/Weather.js","hooks/useWeather.js","hooks/useReverseGeo.js","PageContainer.js","footer/FooterContainer.js","footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./arrow-down.svg","./arrow-up.svg","./clear-day.svg","./clear-night.svg","./close.svg","./cloudy.svg","./fog.svg","./humidity.svg","./partly-cloudy-day.svg","./partly-cloudy-night.svg","./rain.svg","./sleet.svg","./snow.svg","./wind-speed.svg","./wind.svg","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","NavContainer","styled","Navbar","_templateObject","NavFormContainer","Form","attrs","className","NavFormContainer_templateObject","NavSearchFormGroup","FormGroup","NavSearchFormGroup_templateObject","NavButton","Button","NavButton_templateObject","props","color","NavInput","Input","NavInput_templateObject","useFetch","url","changeIdentifier","_useState","useState","_useState2","slicedToArray","data","setData","fetchData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","stop","apply","this","arguments","useEffect","NavSearchForm","weatherColor","addLocation","searchInputError","setSearchInputError","locationList","input","setInput","_useState3","_useState4","searchTerm","setSearchTerm","geoData","concat","process","useForwardGeo","length","_geoData$","lat","lon","location","react_default","createElement","nav_NavFormContainer","onSubmit","preventDefault","inline","nav_NavSearchFormGroup","nav_NavInput","type","placeholder","value","onChange","target","invalid","FormFeedback","nav_NavButton","string","NavUnitSwitchContainer","Col","NavUnitSwitchContainer_templateObject","NavUnitSwitch","isSiUnits","setSiUnits","nav_NavUnitSwitchContainer","react_switch_default","checked","uncheckedIcon","checkedIcon","offColor","hex","onColor","Nav","Color","darken","Math","abs","mainAlpha","nav_NavContainer","assign","WeatherContainer","WeatherContainer_templateObject","WeatherInnerContainer","div","WeatherInnerContainer_templateObject","WeatherCard","Card","WeatherCard_templateObject","alpha","WeatherHeader","h1","WeatherHeader_templateObject","WeatherBody_templateObject","WeatherIcon","icon","imageName","charAt","toUpperCase","slice","replace","src","require","title","alt","WeatherIconContainer","WeatherIconContainer_templateObject","WeatherMiscContainer","WeatherMiscContainer_templateObject","WeatherInfoContainer","WeatherInfoContainer_templateObject","InlineWrapper","InlineWrapper_templateObject","right","center","WeatherProgressContainer","WeatherProgressContainer_templateObject","WeatherProgressBar","Progress","WeatherProgressBar_templateObject","WeatherProgress","weatherData","timeFormat","timeAlpha","sunrise","moment","tz","daily","sunriseTime","timezone","sunset","sunsetTime","sunTime","diff","sunProgress","currently","time","progressColor","Row","common_InlineWrapper","left","format","weather_WeatherProgressContainer","weather_WeatherProgressBar","WeatherInfoHorizontalListContainer","WeatherInfoHorizontalListContainer_templateObject","WeatherInfoHorizontalList","ul","WeatherInfoHorizontalList_templateObject","WeatherInfoHorizontalListItem","li","WeatherInfoHorizontalListItem_templateObject","WeatherInfoList","ListGroup","WeatherInfoList_templateObject","WeatherInfoListItem","ListGroupItem","WeatherInfoListItem_templateObject","day","WeatherListIconContainer","WeatherListIconContainer_templateObject","horizontal","SmallDiv","SmallDiv_templateObject","WeatherInfoContent","hourOnlyFormat","hourList","hourly","h","objectSpread","momentTime","dayList","d","weather_WeatherInfoHorizontalListContainer","lib","autoHeight","weather_WeatherInfoHorizontalList","toConsumableArray","hour","weather_WeatherInfoHorizontalListItem","key","isSameOrAfter","add","common_SmallDiv","weather_WeatherListIconContainer","round","temperature","style","height","weather_WeatherInfoList","flush","weather_WeatherInfoListItem","upIcon","temperatureHigh","downIcon","temperatureLow","WeatherMiscContent","windSpeed","humidity","windIcon","humidityIcon","WeatherBodyDay","small","WeatherBodyDay_templateObject","WeatherRemoveButton","WeatherRemoveButtonContainer","WeatherRemoveButtonContainer_templateObject","LoadingContainer","LoadingContainer_templateObject","Loading","loading_LoadingContainer","Weather","setLocation","setChangeIdentifier","_useState5","_useState6","setTimeAlpha","unitParam","useWeather","coords","_coords$replace$split","split","_coords$replace$split2","useReverseGeo","removeSelf","remove","getTimeUntilNextMinute","startOf","updateData","setTimeout","setMainAlpha","error","_weatherData$currentl","timeString","timeHours","weather_WeatherContainer","weather_WeatherInnerContainer","weather_WeatherCard","WeatherBody","address","city","water","state","county","suburb","name","village","road","country","weather_WeatherHeader","weather_WeatherBodyDay","weather_WeatherMiscContainer","weather_WeatherIconContainer","removeAble","weather_WeatherRemoveButtonContainer","onClick","weather_WeatherInfoContainer","PageContainer_templateObject","footer","FooterContainer_templateObject","Footer","FooterContainer","href","rel","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","storeLocationList","localStorage","setItem","JSON","stringify","loadStoredLocationList","stored","getItem","parsedList","parse","setState","includes","prevState","removeLocation","filter","l","message","userLocation","_this2","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","_this3","PageContainer","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sICAxC,IAAAC,EAAA,CACAC,mBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,oBAAA,GACAC,cAAA,GACAC,eAAA,GACAC,YAAA,GACAC,iBAAA,GACAC,0BAAA,GACAC,4BAAA,GACAC,aAAA,GACAC,cAAA,GACAC,aAAA,GACAC,mBAAA,GACAC,aAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAnB,EAAAoB,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAlB,EAAAiB,GACA,KAAAC,EAAA,IACA,IAAAE,EAAA,IAAAC,MAAA,uBAAAJ,EAAA,KAEA,MADAG,EAAAE,KAAA,mBACAF,EAEA,OAAAF,EAEAF,EAAAO,KAAA,WACA,OAAAC,OAAAD,KAAAvB,IAEAgB,EAAAS,QAAAN,EACAvB,EAAAC,QAAAmB,EACAA,EAAAE,GAAA,uBCrCAtB,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uaCGxC,IAUe2B,EAVMC,YAAOC,IAAPD,CAAHE,mGCAlB,IAIeC,EAJUH,YAAOI,KAAMC,MAAM,CACxCC,UAAW,iDADUN,CAAHO,kFCAtB,IAIeC,EAJYR,YAAOS,KAAWJ,MAAM,CAC/CC,UAAW,6CADYN,CAAHU,qLCAxB,IAUeC,EAVGX,YAAOY,KAAQP,MAAM,CACnCC,UAAW,gCADGN,CAAHa,IAKa,SAAAC,GAAK,OAAIA,EAAMC,sFCL3C,IAIeC,EAJEhB,YAAOiB,KAAOZ,MAAM,CACjCC,UAAW,eADEN,CAAHkB,8BCDC,SAASC,EAASC,EAAKC,GAAkB,IAAAC,EAC5BC,qBAD4BC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GAC7CI,EAD6CF,EAAA,GACvCG,EADuCH,EAAA,GAG9CI,EAAS,eAAAC,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,MAAMrB,GADf,cACRe,EADQG,EAAAI,KAAAJ,EAAAE,KAAA,EAEKL,EAASC,OAFd,OAERA,EAFQE,EAAAI,KAIdf,EAAQS,GAJM,wBAAAE,EAAAK,SAAAT,MAAH,yBAAAL,EAAAe,MAAAC,KAAAC,YAAA,GAaf,OANAC,oBAAU,WACF3B,GACAQ,KAEL,CAACR,EAAKC,IAEFK,ECVI,SAASsB,EAATnB,GAA2G,IAAlFoB,EAAkFpB,EAAlFoB,aAAcC,EAAoErB,EAApEqB,YAAaC,EAAuDtB,EAAvDsB,iBAAkBC,EAAqCvB,EAArCuB,oBAAqBC,EAAgBxB,EAAhBwB,aAAgB/B,EAC5FC,mBAAS,IADmFC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GAC/GgC,EAD+G9B,EAAA,GACxG+B,EADwG/B,EAAA,GAAAgC,EAElFjC,mBAAS,IAFyEkC,EAAA5D,OAAA4B,EAAA,EAAA5B,CAAA2D,EAAA,GAE/GE,EAF+GD,EAAA,GAEnGE,EAFmGF,EAAA,GAIhHG,ECVK,SAAuBF,GAGlC,OAFevC,EAASuC,EAAU,GAAAG,OAAMC,sFAAND,OAA8CH,GAAe,IDS/EK,CAAcL,GAE9BX,oBAAU,WACN,GAAIa,EACA,GAAIA,EAAQI,OAAQ,CAChBT,EAAS,IADO,IAAAU,EAGKL,EAAQ,GAArBM,EAHQD,EAGRC,IAAKC,EAHGF,EAGHE,IACPC,EAAQ,GAAAP,OAAMK,EAAN,KAAAL,OAAaM,GAE3BjB,EAAYkB,QAIZhB,EAAoB,iCAG7B,CAACQ,IAEJb,oBAAU,WACNY,EAAc,KACf,CAACN,IAuBJ,OACIgB,EAAArC,EAAAsC,cAACC,EAAD,CAAkBC,SAjBD,SAAA/E,GACjBA,EAAEgF,iBAEGnB,EAKDA,IAAUI,EAKdC,EAAcL,GAJVF,EAAoB,wCALpBA,EAAoB,iCAakBsB,QAAM,GAC5CL,EAAArC,EAAAsC,cAACK,EAAD,KACIN,EAAArC,EAAAsC,cAACM,EAAD,CAAUC,KAAK,OAAOC,YAAY,oBAAoBC,MAAOzB,EAAO0B,SAxB3D,SAAAvF,GACjB2D,EAAoB,IACpBG,EAAS9D,EAAEwF,OAAOF,QAsBkFG,UAAS/B,IACrGkB,EAAArC,EAAAsC,cAACa,EAAA,EAAD,KAAehC,IAEnBkB,EAAArC,EAAAsC,cAACc,EAAD,CAAWrE,MAAOkC,EAAaoC,UAA/B,yYE3DZ,IAsBeC,EAtBgBtF,YAAOuF,KAAKlF,MAAM,CAC7CC,UAAW,8GADgBN,CAAHwF,KCCb,SAASC,EAAT5D,GAAgE,IAAvCoB,EAAuCpB,EAAvCoB,aAAcyC,EAAyB7D,EAAzB6D,UAAWC,EAAc9D,EAAd8D,WAK7D,OACItB,EAAArC,EAAAsC,cAACsB,EAAD,KACIvB,EAAArC,EAAAsC,cAAA,gBACAD,EAAArC,EAAAsC,cAAA,aACID,EAAArC,EAAAsC,cAACuB,EAAA7D,EAAD,CACIgD,SATK,SAAAc,GACjBH,EAAWG,IASCA,QAASJ,EACTK,eAAe,EACfC,aAAa,EACbC,SAAUhD,EAAaiD,MACvBC,QAASlD,EAAaiD,QAE1B7B,EAAArC,EAAAsC,cAAA,6BAEJD,EAAArC,EAAAsC,cAAA,iBCjBG,SAAS8B,EAAItF,GACxB,IAAMmC,EAAeoD,IAAM,WAAWC,OAAuC,GAAhCC,KAAKC,IAAI,EAAI1F,EAAM2F,YAEhE,OACIpC,EAAArC,EAAAsC,cAACoC,EAAD,KACIrC,EAAArC,EAAAsC,cAACtB,EAADnD,OAAA8G,OAAA,GAAmB7F,EAAnB,CAA0BmC,aAAcA,KACxCoB,EAAArC,EAAAsC,cAACmB,EAAD,CAAexC,aAAcA,EAAcyC,UAAW5E,EAAM4E,UAAWC,WAAY7E,EAAM6E,wGCTrG,IAIeiB,EAJU5G,YAAOuF,KAAKlF,MAAM,CACvCC,UAAW,4FADUN,CAAH6G,yICDtB,IAKeC,EALe9G,IAAO+G,IAAVC,4YCC3B,IAceC,GAdKjH,YAAOkH,IAAPlH,CAAHmH,IAO0C,SAAArG,GAAK,OAAIA,EAAMsG,MAAQ,IAA4B,SAAAtG,GAAK,OAAIA,EAAMsG,MAAQ,0HCRrI,IAKeC,GALOrH,IAAOsH,GAAVC,sGCAnB,IAIeF,GAJOrH,IAAO+G,IAAVS,MCAJ,SAASC,GAAT5F,GAA+B,IAAR6F,EAAQ7F,EAAR6F,KAC5BC,GAAaD,EAAKE,OAAO,GAAGC,cAAgBH,EAAKI,MAAM,IAAIC,QAAQ,KAAM,KAE/E,OACI1D,EAAArC,EAAAsC,cAAA,OAAK0D,IAAKC,MAAQ,KAAApE,OAAU6D,EAAX,SAAwBQ,MAAOP,EAAWQ,IAAKR,qICJxE,IAMeS,GANcpI,IAAO+G,IAAVsB,0OCA1B,IAceC,GAdctI,IAAO+G,IAAI1G,MAAM,CAC1CC,UAAW,sBADcN,CAAHuI,mKCA1B,IAOeC,GAPcxI,IAAO+G,IAAV0B,6JCA1B,IAKeC,GALO1I,IAAO+G,IAAV4B,KAED,SAAA7H,GAAK,OAAIA,EAAM8H,MAAQ,QAAW9H,EAAM+H,OAAS,SAAW,gFCD9E,IAIeC,GAJkB9I,YAAOuF,KAAKlF,MAAM,CAC/CC,UAAW,uFADkBN,CAAH+I,kKCA9B,IAMeC,GANYhJ,YAAOiJ,KAAPjJ,CAAHkJ,KAEI,SAAApI,GAAK,OAAIA,EAAMC,QCG5B,SAASoI,GAATtH,GAAiE,IAAtCuH,EAAsCvH,EAAtCuH,YAAaC,EAAyBxH,EAAzBwH,WAAYC,EAAazH,EAAbyH,UACzDC,EAAUC,IAAOC,GACqB,IAAxCL,EAAYM,MAAMhI,KAAK,GAAGiI,YAC1BP,EAAYQ,UAGVC,EAASL,IAAOC,GACqB,IAAvCL,EAAYM,MAAMhI,KAAK,GAAGoI,WAC1BV,EAAYQ,UAGVG,EAAUF,EAAOG,KAAKT,GAKtBU,EAHOT,IAAOC,GAAgC,IAA7BL,EAAYc,UAAUC,KAAaf,EAAYQ,UAE3CI,KAAKT,GACKQ,EAAW,IAE1CK,EAAgB/D,IAAM,WAAWC,OAAiC,GAA1BC,KAAKC,IAAI,EAAI8C,IAE3D,OACIjF,EAAArC,EAAAsC,cAAC+F,GAAA,EAAD,KACIhG,EAAArC,EAAAsC,cAACiB,EAAA,EAAD,CAAKjF,UAAU,eACX+D,EAAArC,EAAAsC,cAACgG,GAAD,CAAeC,MAAI,GACflG,EAAArC,EAAAsC,cAAA,sBAGAD,EAAArC,EAAAsC,cAAA,WACKiF,EAAQiB,OAAOnB,MAI5BhF,EAAArC,EAAAsC,cAACmG,GAAD,KACIpG,EAAArC,EAAAsC,cAACoG,GAAD,CAAoB3F,MAAOkF,EAAalJ,MAAOqJ,EAAc/E,YAEjEhB,EAAArC,EAAAsC,cAACiB,EAAA,EAAD,CAAKjF,UAAU,eACX+D,EAAArC,EAAAsC,cAACgG,GAAD,CAAe1B,OAAK,GAChBvE,EAAArC,EAAAsC,cAAA,qBAGAD,EAAArC,EAAAsC,cAAA,WACKuF,EAAOW,OAAOnB,oKC/CvC,IAMesB,GAN4B3K,IAAO+G,IAAV6D,kICAxC,IAOeC,GAPmB7K,IAAO8K,GAAGzK,MAAM,CAC9CC,UAAW,eADmBN,CAAH+K,+FCA/B,IAMeC,GANuBhL,IAAOiL,GAAG5K,MAAM,CAClDC,UAAW,oBADuBN,CAAHkL,gHCCnC,IAIeC,GAJSnL,YAAOoL,KAAPpL,CAAHqL,oUCArB,IAgBeC,GAhBatL,YAAOuL,MAAelL,MAAM,CACpDC,UAAW,sCADaN,CAAHwL,KAMF,SAAA1K,GAAK,OAAIA,EAAM2K,IAAM,OAAS,OAC3B,SAAA3K,GAAK,OAAIA,EAAM2K,IAAM,OAAS,wRCRxD,IAYeC,GAZkB1L,IAAO+G,IAAV4E,KAEV,SAAA7K,GAAK,OAAIA,EAAM8K,WAAa,EAAI,6ICFpD,IAIeC,GAJE7L,IAAO+G,IAAV+E,MCaC,SAASC,GAAmBjL,GACvC,IAAMsI,EAActI,EAAMsI,YACpBQ,EAAWR,EAAYQ,SAEvBoC,GADalL,EAAMuI,WACFvI,EAAMkL,gBAEvBC,EAAW7C,EAAY8C,OAAOxK,KAAKoG,MAAM,EAAG,IAAIzJ,IAAI,SAAA8N,GAAC,OAAAtM,OAAAuM,GAAA,EAAAvM,CAAA,GAAUsM,EAAV,CAAaE,WAAY7C,IAAOC,GAAY,IAAT0C,EAAEhC,KAAaP,OAEvG0C,EAAUlD,EAAYM,MAAMhI,KAAKoG,MAAM,GAAGzJ,IAAI,SAAAkO,GAAC,OAAA1M,OAAAuM,GAAA,EAAAvM,CAAA,GAAU0M,EAAV,CAAaF,WAAY7C,IAAOC,GAAY,IAAT8C,EAAEpC,KAAaP,OAEvG,OACIvF,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAC6E,GAAoBrI,GACrBuD,EAAArC,EAAAsC,cAACkI,GAAD,KACInI,EAAArC,EAAAsC,cAACmI,GAAA,WAAD,CAAYC,YAAU,GAClBrI,EAAArC,EAAAsC,cAACqI,GAAD,KACK9M,OAAA+M,EAAA,EAAA/M,CAAIoM,GAAU5N,IAAI,SAAAwO,GAAI,OACnBxI,EAAArC,EAAAsC,cAACwI,GAAD,CAA+BC,IAAG,OAAAlJ,OAASgJ,EAAK1C,MAAQ0C,KAAM,GAC1DxI,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,aACKuI,EAAKR,WAAWW,cAAcxD,MAASyD,IAAI,EAAG,OAAQ,KACnD,WAAa,IAGrB5I,EAAArC,EAAAsC,cAAC4I,GAAD,KACKL,EAAKR,WAAW7B,OAAOwB,KAGhC3H,EAAArC,EAAAsC,cAAC6I,GAAD,CAA0BvB,YAAU,GAChCvH,EAAArC,EAAAsC,cAACmD,GAAD,CAAaC,KAAMmF,EAAKnF,QAE5BrD,EAAArC,EAAAsC,cAAA,WACKiC,KAAK6G,MAAMP,EAAKQ,aADrB,cAQpBhJ,EAAArC,EAAAsC,cAACmI,GAAA,WAAD,CAAYa,MAAO,CAAEC,OAAQ,MACzBlJ,EAAArC,EAAAsC,cAACkJ,GAAD,CAAiBC,OAAK,GACjB5N,OAAA+M,EAAA,EAAA/M,CAAIyM,GAASjO,IAAI,SAAAoN,GAAG,OACjBpH,EAAArC,EAAAsC,cAACoJ,GAAD,CAAqBX,IAAG,MAAAlJ,OAAQ4H,EAAItB,MAAQsB,IAAK,GAC7CpH,EAAArC,EAAAsC,cAAA,WACKkF,IAAOC,GAAc,IAAXgC,EAAItB,KAAaP,GAAUY,OAAO,SAEjDnG,EAAArC,EAAAsC,cAAC6I,GAAD,KACI9I,EAAArC,EAAAsC,cAACmD,GAAD,CAAaC,KAAM+D,EAAI/D,QAE3BrD,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,OAAK0D,IAAK2F,KAAQxF,IAAI,sBAAsBD,MAAM,wBACjD3B,KAAK6G,MAAM3B,EAAImC,iBAFpB,QAIAvJ,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,OAAK0D,IAAK6F,KAAU1F,IAAI,qBAAqBD,MAAM,uBAClD3B,KAAK6G,MAAM3B,EAAIqC,gBAFpB,2DCjEjB,SAASC,GAATlM,GAAgE,IAAlCmM,EAAkCnM,EAAlCmM,UAAWC,EAAuBpM,EAAvBoM,SAAUvI,EAAa7D,EAAb6D,UAC9D,OACIrB,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,OAAK0D,IAAKkG,KAAU/F,IAAI,aAAaD,MAAM,eAC1C3B,KAAK6G,MAAMY,GAFhB,IAE6BtI,EAAY,MAAQ,OAEjDrB,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,OAAK0D,IAAKmG,KAAchG,IAAI,WAAWD,MAAM,aAC5C3B,KAAK6G,MAAiB,IAAXa,GACXvI,EAAY,IAAM,GAHvB,2HCTZ,IAKe0I,GALQpO,IAAOqO,MAAVC,0BCCL,SAASC,KACpB,OACIlK,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAA,OAAK0D,IAAKN,KAAMS,IAAI,SAASD,MAAM,oKCJ/C,IAOesG,GAPsBxO,IAAO+G,IAAV0H,qKCAlC,IAQeC,GARU1O,IAAO+G,IAAV4H,MCEP,SAASC,KACpB,OACIvK,EAAArC,EAAAsC,cAACuK,GAAD,KACIxK,EAAArC,EAAAsC,cAAA,OAAK0D,IAAKN,KAAMS,IAAI,UAAUD,MAAM,gBCajC,SAAS4G,GAAQhO,GAAO,IAAAQ,EACHC,mBAAST,EAAMsD,UADZ5C,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GAC5B8C,EAD4B5C,EAAA,GAClBuN,EADkBvN,EAAA,GAAAgC,EAGajC,qBAHbkC,EAAA5D,OAAA4B,EAAA,EAAA5B,CAAA2D,EAAA,GAG5BnC,EAH4BoC,EAAA,GAGVuL,EAHUvL,EAAA,GAAAwL,EAKD1N,mBAAS,GALR2N,EAAArP,OAAA4B,EAAA,EAAA5B,CAAAoP,EAAA,GAK5B3F,EAL4B4F,EAAA,GAKjBC,EALiBD,EAAA,GAO7B9F,ECzBK,SAAoBhF,EAAU/C,EAAkBqE,GAC3DtB,EAAWA,EAAS2D,QAAQ,MAAO,IAEnC,IAAMqH,EAAS,UAAAvL,OAAa6B,EAAY,KAAO,MAI/C,OAFevE,EAAQ,GAAA0C,OAAIC,iDAAJ,KAAAD,OAAyCO,GAAzCP,OAAoDuL,GAAa/N,GDoBpEgO,CAAWjL,EAAU/C,EAAkBP,EAAM4E,WAC3D9B,EE1BK,SAAuB0L,GAAQ,IAAAC,EAEvBD,EAAOvH,QAAQ,MAAO,IAAIyH,MAAM,KAFTC,EAAA5P,OAAA4B,EAAA,EAAA5B,CAAA0P,EAAA,GAEnCrL,EAFmCuL,EAAA,GAE9BtL,EAF8BsL,EAAA,GAI1C,GAAKvL,GAAQC,EAMb,OAFehD,EAAQ,GAAA0C,OAAIC,kFAAJ,SAAAD,OAAiDK,EAAjD,SAAAL,OAA4DM,IFkBnEuL,CAActL,GAExBuL,EAAa,WACf7O,EAAM8O,OAAOxL,IAGXyL,EAAyB,WAC3B,OAAOrG,MAASyD,IAAI,EAAG,UAAU6C,QAAQ,UAAU7C,IAAI,EAAG,WAAWjD,KAAKR,QAGxEuG,EAAa,SAAbA,IACFf,EAAoBxF,MAASgB,OAAO,MAEpCwF,WAAWD,EAAYF,MAqB3B,GAlBA9M,oBAAU,WACNgM,EAAYjO,EAAMsD,UAElB4L,WAAWD,EAAYF,MACxB,CAAC/O,EAAMsD,WAEVrB,oBAAU,WACFjC,EAAMmP,cACNnP,EAAMmP,aAAa3G,IAExB,CAACA,IAEJvG,oBAAU,WACFqG,GAAexF,IAAYwF,EAAY8G,OAAStM,EAAQsM,QACxDP,KAEL,CAACvG,EAAaxF,IAEbwF,GAAexF,IAAYwF,EAAY8G,QAAUtM,EAAQsM,MAAO,KAAAC,EACT/G,EAAYc,UAA7DC,EAD0DgG,EAC1DhG,KAAMkD,EADoD8C,EACpD9C,YAAaW,EADuCmC,EACvCnC,UAAWC,EAD4BkC,EAC5BlC,SAAUvG,EADkByI,EAClBzI,KAE9C2F,EAAc9G,KAAK6G,MAAMC,GACzBlD,EAAOX,IAAOC,GAAU,IAAPU,EAAaf,EAAYQ,UAE1C,IAAMP,EAAavI,EAAM4E,UAAY,QAAU,QACzCsG,EAAiBlL,EAAM4E,UAAY,KAAO,KAE1C0K,EAAajG,EAAKK,OAAOnB,GAEzBgH,EAAYlG,EAAKK,OAAO,KACxBpD,GAASiJ,EAAY,GAAKA,EAAY9J,KAAKC,IAAI,GAAK6J,IAAc,GAKxE,OAJI/G,IAAclC,GACd+H,EAAa/H,GAIb/C,EAAArC,EAAAsC,cAACgM,EAAD,KACIjM,EAAArC,EAAAsC,cAACiM,EAAD,KACIlM,EAAArC,EAAAsC,cAACkM,GAAD,CAAapJ,MAAOkC,GAChBjF,EAAArC,EAAAsC,cAACmM,GAAD,KAEQ7M,EAAQ8M,QAAQC,MAChB/M,EAAQ8M,QAAQE,OAChBhN,EAAQ8M,QAAQG,OAChBjN,EAAQ8M,QAAQI,QAChBlN,EAAQ8M,QAAQK,QAChBnN,EAAQ8M,QAAQM,MAChBpN,EAAQoN,MACRpN,EAAQ8M,QAAQO,SAChBrN,EAAQ8M,QAAQQ,MAChBtN,EAAQ8M,QAAQS,SAGxB9M,EAAArC,EAAAsC,cAAC8M,GAAD,KACK/D,EADL,QAGAhJ,EAAArC,EAAAsC,cAACmM,GAAD,KACKL,EACD/L,EAAArC,EAAAsC,cAAC+M,GAAD,KAAiBlH,EAAKK,OAAO,UAEjCnG,EAAArC,EAAAsC,cAACgN,GAAD,KACIjN,EAAArC,EAAAsC,cAACyJ,GAAD,CAAoBC,UAAWA,EAAWC,SAAUA,EAAUvI,UAAW5E,EAAM4E,aAEnFrB,EAAArC,EAAAsC,cAACiN,GAAD,KACIlN,EAAArC,EAAAsC,cAACmD,GAAD,CAAaC,KAAMA,KAEtB5G,EAAM0Q,WACHnN,EAAArC,EAAAsC,cAACmN,GAAD,CAA8BC,QAAS/B,GACnCtL,EAAArC,EAAAsC,cAACiK,GAAD,OAEJ,IAERlK,EAAArC,EAAAsC,cAACqN,GAAD,KACItN,EAAArC,EAAAsC,cAACyH,GAAD,CAAoB3C,YAAaA,EAAaC,WAAYA,EAAYC,UAAWA,EAAW0C,eAAgBA,OAQ5H,OACI3H,EAAArC,EAAAsC,cAACsK,GAAD,wJG3HZ,IAMe3H,GANKjH,YAAOqK,KAAPrK,CAAH4R,8XCDjB,IAoBetG,GApBatL,IAAO6R,OAAVC,MCCV,SAASC,KACpB,OACI1N,EAAArC,EAAAsC,cAAC0N,GAAD,8BAEI3N,EAAArC,EAAAsC,cAAA,KAAG2N,KAAK,iCAAiChN,OAAO,SAASiN,IAAI,uBAA7D,4BCgHGC,eA/GX,SAAAA,IAAc,IAAAC,EAAA,OAAAvS,OAAAwS,EAAA,EAAAxS,CAAAgD,KAAAsP,IACVC,EAAAvS,OAAAyS,EAAA,EAAAzS,CAAAgD,KAAAhD,OAAA0S,EAAA,EAAA1S,CAAAsS,GAAAK,KAAA3P,QAuBJ4P,kBAAoB,WAChBC,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUT,EAAKvB,MAAMxN,gBAzBrD+O,EA4BdU,uBAAyB,WACrB,IAAMC,EAASL,aAAaM,QAAQ,gBAC9BC,EAAaF,EAASH,KAAKM,MAAMH,GAAU,GAEjDX,EAAKe,SAAS,CACV9P,aAAc4P,KAjCRb,EAqCdnC,aAAe,SAAAxJ,GACX2L,EAAKe,SAAS,CAAE1M,eAtCN2L,EAyCdlP,YAAc,SAAAkB,GACLgO,EAAKvB,MAAMxN,aAAa+P,SAAShP,GAOlCgO,EAAKhP,oBAAoB,wCANzBgP,EAAKe,SAAS,SAAAE,GAAS,MAAK,CACxBhQ,aAAY,GAAAQ,OAAAhE,OAAA+M,EAAA,EAAA/M,CAAMwT,EAAUhQ,cAAhB,CAA8Be,MAC1CgO,EAAKK,oBA7CHL,EAqDdkB,eAAiB,SAAAlP,GACbgO,EAAKe,SAAS,SAAAE,GAAS,MAAK,CACxBhQ,aAAcgQ,EAAUhQ,aAAakQ,OAAO,SAAAC,GAAC,OAAIA,IAAMpP,MACvDgO,EAAKK,oBAxDCL,EA2DdhP,oBAAsB,SAAAqQ,GAClBrB,EAAKe,SAAS,CACVhQ,iBAAkBsQ,KA7DZrB,EAiEdzM,WAAa,SAAAZ,GACTqN,EAAKe,SAAS,CACVzN,UAAWX,KAjEfqN,EAAKvB,MAAQ,CACT6C,aAAc,KACdjN,UAAW,GACXpD,aAAc,GAMdF,iBAAkB,GAClBuC,WAAW,GAZL0M,mFAgBM,IAAAuB,EAAA9Q,KAChB+Q,UAAUC,YAAYC,mBAAmB,SAAAC,GACrCJ,EAAKR,SAAS,CAAEO,aAAY,GAAA7P,OAAKkQ,EAAIzE,OAAO0E,SAAhB,KAAAnQ,OAA4BkQ,EAAIzE,OAAO2E,eAGvEpR,KAAKiQ,0DAkDA,IAAAoB,EAAArR,KACL,OACIwB,EAAArC,EAAAsC,cAAA,WACID,EAAArC,EAAAsC,cAAC8B,EAAD,CACIK,UAAW5D,KAAKgO,MAAMpK,UACtBvD,YAAaL,KAAKK,YAClBC,iBAAkBN,KAAKgO,MAAM1N,iBAC7BC,oBAAqBP,KAAKO,oBAC1BsC,UAAW7C,KAAKgO,MAAMnL,UACtBC,WAAY9C,KAAK8C,WACjBtC,aAAcR,KAAKgO,MAAMxN,eAE7BgB,EAAArC,EAAAsC,cAAC6P,GAAD,KACKtR,KAAKgO,MAAM6C,aACRrP,EAAArC,EAAAsC,cAACwK,GAAD,CACI/B,IAAKlK,KAAKgO,MAAM6C,aAChBtP,SAAUvB,KAAKgO,MAAM6C,aACrBzD,aAAcpN,KAAKoN,aACnBL,OAAQ/M,KAAKyQ,eACb5N,UAAW7C,KAAKgO,MAAMnL,YAG1B,KAEH7C,KAAKgO,MAAMxN,aAAahF,IAAI,SAAA+F,GAAQ,OACjCC,EAAArC,EAAAsC,cAACwK,GAAD,CACI/B,IAAK3I,EACLA,SAAUA,EACVwL,OAAQsE,EAAKZ,eACb5N,UAAWwO,EAAKrD,MAAMnL,UACtB8L,YAAU,OAItBnN,EAAArC,EAAAsC,cAACyN,GAAD,cA1GEqC,aCKEC,QACa,cAA7BC,OAAOlQ,SAASmQ,UAEa,UAA7BD,OAAOlQ,SAASmQ,UAEhBD,OAAOlQ,SAASmQ,SAASC,MACrB,iECXRC,IAASC,OAAOrQ,EAAArC,EAAAsC,cAACqQ,GAAD,MAASC,SAASC,eAAe,SD0HzC,kBAAmBjB,WACnBA,UAAUkB,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.a17634c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-down.daf15618.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.eb77e685.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.aa412986.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.4ee8080e.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind-speed.77ea8d8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.8a696c5f.gif\";","var map = {\n\t\"./arrow-down.svg\": 18,\n\t\"./arrow-up.svg\": 19,\n\t\"./clear-day.svg\": 70,\n\t\"./clear-night.svg\": 71,\n\t\"./close.svg\": 20,\n\t\"./cloudy.svg\": 72,\n\t\"./fog.svg\": 73,\n\t\"./humidity.svg\": 21,\n\t\"./partly-cloudy-day.svg\": 74,\n\t\"./partly-cloudy-night.svg\": 75,\n\t\"./rain.svg\": 76,\n\t\"./sleet.svg\": 77,\n\t\"./snow.svg\": 78,\n\t\"./wind-speed.svg\": 22,\n\t\"./wind.svg\": 79\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 69;","module.exports = __webpack_public_path__ + \"static/media/clear-day.000b286c.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.f8c59603.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.e50dbad2.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.6302f408.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.be761d07.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-night.0e82b063.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.90687fc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.86fed6c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.5427c982.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.52175f0b.svg\";","import styled from 'styled-components';\r\nimport { Navbar } from 'reactstrap';\r\n\r\nconst NavContainer = styled(Navbar)`\r\n    box-shadow: 1px 1px 30px #ddd;\r\n    border-radius: 0 0 5px 5px;\r\n    \r\n    &&& {\r\n        color: #666;\r\n        padding: 15px;\r\n    }\r\n`;\r\n\r\nexport default NavContainer;\r\n","import styled from 'styled-components';\r\nimport { Form } from 'reactstrap';\r\n\r\nconst NavFormContainer = styled(Form).attrs({\r\n    className: 'col-6 col-sm-8 col-md-6 p-0 align-items-start'\r\n})``;\r\n\r\nexport default NavFormContainer;\r\n","import styled from 'styled-components';\r\nimport { FormGroup } from 'reactstrap';\r\n\r\nconst NavSearchFormGroup = styled(FormGroup).attrs({\r\n    className: 'col-12 col-sm-8 col-md-8 col-lg-6 p-0 m-0'\r\n})``;\r\n\r\nexport default NavSearchFormGroup;\r\n","import styled from 'styled-components';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst NavButton = styled(Button).attrs({\r\n    className: 'ml-0 ml-sm-2 col-12 col-sm-2'\r\n})`\r\n    &&& {\r\n        color: white;\r\n        background-color: ${props => props.color};\r\n        border: none;\r\n    }\r\n`;\r\n\r\nexport default NavButton;\r\n","import styled from 'styled-components';\r\nimport { Input } from 'reactstrap';\r\n\r\nconst NavInput = styled(Input).attrs({\r\n    className: 'col-12 mb-2'\r\n})``;\r\n\r\nexport default NavInput;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useFetch(url, changeIdentifier) {\r\n    const [data, setData] = useState();\r\n\r\n    const fetchData = async () => {\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n\r\n        setData(json);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            fetchData();\r\n        }\r\n    }, [url, changeIdentifier]);\r\n\r\n    return data;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FormFeedback } from 'reactstrap';\r\nimport NavFormContainer from './NavFormContainer';\r\nimport NavSearchFormGroup from './NavSearchFormGroup';\r\nimport NavButton from './NavButton';\r\nimport NavInput from './NavInput';\r\nimport useForwardGeo from '../hooks/useForwardGeo';\r\n\r\nexport default function NavSearchForm({ weatherColor, addLocation, searchInputError, setSearchInputError, locationList }) {\r\n    const [input, setInput] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const geoData = useForwardGeo(searchTerm);\r\n\r\n    useEffect(() => {\r\n        if (geoData) {\r\n            if (geoData.length) {\r\n                setInput('');\r\n\r\n                const { lat, lon } = geoData[0];\r\n                const location = `${lat},${lon}`;\r\n\r\n                addLocation(location);\r\n            }\r\n\r\n            else {\r\n                setSearchInputError('Could not find that location');\r\n            }\r\n        }\r\n    }, [geoData]);\r\n\r\n    useEffect(() => {\r\n        setSearchTerm('');\r\n    }, [locationList]);\r\n\r\n    const handleChange = e => {\r\n        setSearchInputError('');\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (!input) {\r\n            setSearchInputError('You have to enter a location');\r\n            return;\r\n        }\r\n\r\n        if (input === searchTerm) {\r\n            setSearchInputError('You have already added that location');\r\n            return;\r\n        }\r\n\r\n        setSearchTerm(input);\r\n    }\r\n\r\n    return (\r\n        <NavFormContainer onSubmit={handleSubmit} inline>\r\n            <NavSearchFormGroup>\r\n                <NavInput type=\"text\" placeholder='Add a location...' value={input} onChange={handleChange} invalid={searchInputError ? true : false} />\r\n                <FormFeedback>{searchInputError}</FormFeedback>\r\n            </NavSearchFormGroup>\r\n            <NavButton color={weatherColor.string()}>Add</NavButton>\r\n        </NavFormContainer>\r\n    )\r\n}\r\n","import useFetch from './useFetch';\r\n\r\nexport default function useForwardGeo(searchTerm) {\r\n    const result = useFetch(searchTerm ? `${process.env.REACT_APP_FORWARD_GEO_URL}${searchTerm}` : '');\r\n\r\n    return result;\r\n}\r\n","import styled from 'styled-components';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst NavUnitSwitchContainer = styled(Col).attrs({\r\n    className: 'col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2 px-lg-0 px-xl-4 d-flex align-items-center justify-content-around'\r\n})`\r\n    & > h2 {\r\n        font-size: 1.4em;\r\n        margin: 0;\r\n    }\r\n\r\n    margin-top: -10px;\r\n\r\n    & > label {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin: 14px 0 0 0;\r\n\r\n        & > small {\r\n            \r\n        }\r\n    }\r\n`;\r\n\r\nexport default NavUnitSwitchContainer;\r\n","import React, { useState } from 'react';\r\nimport Switch from 'react-switch';\r\nimport NavUnitSwitchContainer from './NavUnitSwitchContainer';\r\n\r\nexport default function NavUnitSwitch({ weatherColor, isSiUnits, setSiUnits }) {\r\n    const handleChange = checked => {\r\n        setSiUnits(checked);\r\n    }\r\n\r\n    return (\r\n        <NavUnitSwitchContainer>\r\n            <h2>US</h2>\r\n            <label>\r\n                <Switch\r\n                    onChange={handleChange}\r\n                    checked={isSiUnits}\r\n                    uncheckedIcon={false}\r\n                    checkedIcon={false}\r\n                    offColor={weatherColor.hex()}\r\n                    onColor={weatherColor.hex()}\r\n                />\r\n                <small>Unit system</small>\r\n            </label>\r\n            <h2>SI</h2>\r\n        </NavUnitSwitchContainer>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Color from 'color';\r\nimport NavContainer from './NavContainer';\r\nimport NavSearchForm from './NavSearchForm';\r\nimport NavUnitSwitch from './NavUnitSwitch';\r\n\r\nexport default function Nav(props) {\r\n    const weatherColor = Color('#94bae8').darken(Math.abs(1 - props.mainAlpha) * 0.7);\r\n\r\n    return (\r\n        <NavContainer>\r\n            <NavSearchForm {...props} weatherColor={weatherColor} />\r\n            <NavUnitSwitch weatherColor={weatherColor} isSiUnits={props.isSiUnits} setSiUnits={props.setSiUnits} />\r\n        </NavContainer>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst WeatherContainer = styled(Col).attrs({\r\n    className: 'col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 d-flex justify-content-start flex-column p-3'\r\n})``;\r\n\r\nexport default WeatherContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInnerContainer = styled.div`\r\n    box-shadow: 1px 1px 30px #ddd;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport default WeatherInnerContainer;\r\n","import styled from 'styled-components';\r\nimport { Card } from 'reactstrap';\r\n\r\nconst WeatherCard = styled(Card)`\r\n    font-weight: 300;\r\n    box-shadow: 1px 1px 30px #ddd;\r\n    text-align: center;\r\n    padding: 35px 40px 20px;\r\n    color: white;\r\n    background-color: #005 !important;\r\n    background-image: linear-gradient(rgba(96, 154, 225, ${props => props.alpha - .1}), rgba(118, 167, 227, ${props => props.alpha + .1}));\r\n    \r\n    &&& {\r\n        border: none;\r\n    }\r\n`;\r\n\r\nexport default WeatherCard;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherHeader = styled.h1`\r\n    font-weight: 300;\r\n    font-size: 4em;\r\n`;\r\n\r\nexport default WeatherHeader;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherHeader = styled.div`\r\n    font-size: 1.5em;\r\n`;\r\n\r\nexport default WeatherHeader;\r\n","import React from 'react';\r\n\r\nexport default function WeatherIcon({ icon }) {\r\n    const imageName = (icon.charAt(0).toUpperCase() + icon.slice(1)).replace(/-/g, ' ');\r\n\r\n    return (\r\n        <img src={require(`../img/${icon}.svg`)} title={imageName} alt={imageName} />\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherIconContainer = styled.div`\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n\r\nexport default WeatherIconContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherMiscContainer = styled.div.attrs({\r\n    className: 'd-flex flex-column'\r\n})`\r\n    position: absolute;\r\n    left: 17px;\r\n    bottom: 17px;\r\n    font-size: 1.1em;\r\n    text-align: left;\r\n\r\n    img {\r\n        margin-right: 6px;\r\n    }\r\n`;\r\n\r\nexport default WeatherMiscContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInfoContainer = styled.div`\r\n    font-weight: 400;\r\n    font-size: 1.1em;\r\n    padding: 10px;\r\n    color: #666;\r\n`;\r\n\r\nexport default WeatherInfoContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst InlineWrapper = styled.div`\r\n    display: inline-block;\r\n    text-align: ${props => props.right ? 'right' : (props.center ? 'center' : 'left')};\r\n`;\r\n\r\nexport default InlineWrapper;\r\n","import styled from 'styled-components';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst WeatherProgressContainer = styled(Col).attrs({\r\n    className: 'col-5 col-sm-8 col-md-6 col-lg-4 col-xl-4 d-flex flex-column justify-content-center'\r\n})``;\r\n\r\nexport default WeatherProgressContainer;\r\n","import styled from 'styled-components';\r\nimport { Progress } from 'reactstrap';\r\n\r\nconst WeatherProgressBar = styled(Progress)`\r\n    > .progress-bar {\r\n        background-color: ${props => props.color} !important;\r\n    }\r\n`;\r\n\r\nexport default WeatherProgressBar;\r\n","import React from 'react';\r\nimport moment from 'moment-timezone';\r\nimport Color from 'color';\r\nimport { Row, Col } from 'reactstrap';\r\nimport InlineWrapper from '../common/InlineWrapper';\r\nimport WeatherProgressContainer from './WeatherProgressContainer';\r\nimport WeatherProgressBar from './WeatherProgressBar';\r\n\r\nexport default function WeatherProgress({ weatherData, timeFormat, timeAlpha }) {\r\n    const sunrise = moment.tz(\r\n        weatherData.daily.data[0].sunriseTime * 1000,\r\n        weatherData.timezone\r\n    );\r\n\r\n    const sunset = moment.tz(\r\n        weatherData.daily.data[0].sunsetTime * 1000,\r\n        weatherData.timezone\r\n    );\r\n\r\n    const sunTime = sunset.diff(sunrise);\r\n\r\n    const time = moment.tz(weatherData.currently.time * 1000, weatherData.timezone);\r\n\r\n    const timeSinceRise = time.diff(sunrise);\r\n    const sunProgress = (timeSinceRise / sunTime) * 100;\r\n\r\n    const progressColor = Color('#94bae8').darken(Math.abs(1 - timeAlpha) * 0.7);\r\n\r\n    return (\r\n        <Row>\r\n            <Col className='text-center'>\r\n                <InlineWrapper left>\r\n                    <div>\r\n                        Sunrise\r\n                    </div>\r\n                    <div>\r\n                        {sunrise.format(timeFormat)}\r\n                    </div>\r\n                </InlineWrapper>\r\n            </Col>\r\n            <WeatherProgressContainer>\r\n                <WeatherProgressBar value={sunProgress} color={progressColor.string()} />\r\n            </WeatherProgressContainer>\r\n            <Col className='text-center'>\r\n                <InlineWrapper right>\r\n                    <div>\r\n                        Sunset\r\n                    </div>\r\n                    <div>\r\n                        {sunset.format(timeFormat)}\r\n                    </div>\r\n                </InlineWrapper>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInfoHorizontalListContainer = styled.div`\r\n    border-top: 1px solid #eaeaea;\r\n    margin-top: 10px;\r\n    padding: 1px 2px 0;\r\n`;\r\n\r\nexport default WeatherInfoHorizontalListContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInfoHorizontalList = styled.ul.attrs({\r\n    className: 'list-inline'\r\n})`\r\n    white-space: nowrap;\r\n    text-align: center;\r\n`;\r\n\r\nexport default WeatherInfoHorizontalList;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInfoHorizontalListItem = styled.li.attrs({\r\n    className: 'list-inline-item'\r\n})`\r\n    margin: 0;\r\n`;\r\n\r\nexport default WeatherInfoHorizontalListItem;\r\n","import styled from 'styled-components';\r\nimport { ListGroup } from 'reactstrap';\r\n\r\nconst WeatherInfoList = styled(ListGroup)`\r\n    margin-top: 10px;\r\n`;\r\n\r\nexport default WeatherInfoList;\r\n","import styled from 'styled-components';\r\nimport { ListGroupItem } from 'reactstrap';\r\n\r\nconst WeatherInfoListItem = styled(ListGroupItem).attrs({\r\n    className: 'd-flex flex-row align-items-center'\r\n})`\r\n    justify-content: space-between;\r\n    \r\n    &&& {\r\n        padding-top: ${props => props.day ? '10px' : '0px'};\r\n        padding-bottom: ${props => props.day ? '10px' : '0px'};\r\n        border-color: #eaeaea;\r\n    }\r\n\r\n    &&&:first-of-type {\r\n        border-top: 1px solid #eaeaea !important;\r\n    }\r\n`;\r\n\r\nexport default WeatherInfoListItem;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherListIconContainer = styled.div`\r\n    margin-left: auto;\r\n    margin-right: ${props => props.horizontal ? 0 : '10px'};\r\n    margin-top: -12px !important;\r\n    margin-bottom: -12px !important;\r\n\r\n    > img {\r\n        width: 60px;\r\n        filter: brightness(0.6);\r\n    }\r\n`;\r\n\r\nexport default WeatherListIconContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst SmallDiv = styled.div`\r\n    margin: -3px;\r\n`;\r\n\r\nexport default SmallDiv;\r\n","import React from 'react';\r\nimport moment from 'moment-timezone';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport WeatherProgress from './WeatherProgress';\r\nimport WeatherInfoHorizontalListContainer from './WeatherInfoHorizontalListContainer';\r\nimport WeatherInfoHorizontalList from './WeatherInfoHorizontalList';\r\nimport WeatherInfoHorizontalListItem from './WeatherInfoHorizontalListItem';\r\nimport WeatherInfoList from './WeatherInfoList';\r\nimport WeatherInfoListItem from './WeatherInfoListItem';\r\nimport WeatherIcon from './WeatherIcon';\r\nimport WeatherListIconContainer from './WeatherListIconContainer';\r\nimport upIcon from '../img/arrow-up.svg';\r\nimport downIcon from '../img/arrow-down.svg';\r\nimport SmallDiv from '../common/SmallDiv';\r\n\r\nexport default function WeatherInfoContent(props) {\r\n    const weatherData = props.weatherData;\r\n    const timezone = weatherData.timezone;\r\n    const timeFormat = props.timeFormat;\r\n    const hourOnlyFormat = props.hourOnlyFormat;\r\n\r\n    const hourList = weatherData.hourly.data.slice(1, 25).map(h => ({ ...h, momentTime: moment.tz(h.time * 1000, timezone) }));\r\n\r\n    const dayList = weatherData.daily.data.slice(1).map(d => ({ ...d, momentTime: moment.tz(d.time * 1000, timezone) }));\r\n\r\n    return (\r\n        <div>\r\n            <WeatherProgress {...props} />\r\n            <WeatherInfoHorizontalListContainer>\r\n                <Scrollbars autoHeight>\r\n                    <WeatherInfoHorizontalList>\r\n                        {[...hourList].map(hour => (\r\n                            <WeatherInfoHorizontalListItem key={`hour${hour.time}`} hour={1}>\r\n                                <div>\r\n                                    <small>\r\n                                        {hour.momentTime.isSameOrAfter(moment().add(1, 'day'), 'd') ?\r\n                                            'Tomorrow' : ''\r\n                                        }\r\n                                    </small>\r\n                                    <SmallDiv>\r\n                                        {hour.momentTime.format(hourOnlyFormat)}\r\n                                    </SmallDiv>\r\n                                </div>\r\n                                <WeatherListIconContainer horizontal>\r\n                                    <WeatherIcon icon={hour.icon} />\r\n                                </WeatherListIconContainer>\r\n                                <div>\r\n                                    {Math.round(hour.temperature)}°\r\n                                </div>\r\n                            </WeatherInfoHorizontalListItem>\r\n                        ))}\r\n                    </WeatherInfoHorizontalList>\r\n                </Scrollbars>\r\n            </WeatherInfoHorizontalListContainer>\r\n            <Scrollbars style={{ height: 200 }}>\r\n                <WeatherInfoList flush>\r\n                    {[...dayList].map(day => (\r\n                        <WeatherInfoListItem key={`day${day.time}`} day={1}>\r\n                            <div>\r\n                                {moment.tz(day.time * 1000, timezone).format('dddd')}\r\n                            </div>\r\n                            <WeatherListIconContainer>\r\n                                <WeatherIcon icon={day.icon} />\r\n                            </WeatherListIconContainer>\r\n                            <div>\r\n                                <div>\r\n                                    <img src={upIcon} alt='Highest temperature' title='Highest temperature' />\r\n                                    {Math.round(day.temperatureHigh)}°\r\n                                </div>\r\n                                <div>\r\n                                    <img src={downIcon} alt='Lowest temperature' title='Lowest temperature' />\r\n                                    {Math.round(day.temperatureLow)}°\r\n                                </div>\r\n                            </div>\r\n                        </WeatherInfoListItem>\r\n                    ))}\r\n                </WeatherInfoList>\r\n            </Scrollbars>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport windIcon from '../img/wind-speed.svg';\r\nimport humidityIcon from '../img/humidity.svg';\r\n\r\nexport default function WeatherMiscContent({ windSpeed, humidity, isSiUnits }) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={windIcon} alt='Wind speed' title='Wind speed' />\r\n                {Math.round(windSpeed)} {isSiUnits ? 'm/s' : 'mph'}\r\n            </div>\r\n            <div>\r\n                <img src={humidityIcon} alt='Humidity' title='Humidity' />\r\n                {Math.round(humidity * 100)}\r\n                {isSiUnits ? ' ' : ''}\r\n                %\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherBodyDay = styled.small`\r\n    font-weight: 300;\r\n    display: block;\r\n`;\r\n\r\nexport default WeatherBodyDay;\r\n","import React from 'react';\r\nimport icon from '../img/close.svg';\r\n\r\nexport default function WeatherRemoveButton() {\r\n    return (\r\n        <div>\r\n            <img src={icon} alt='Remove' title='Remove' />\r\n        </div>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherRemoveButtonContainer = styled.div`\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport default WeatherRemoveButtonContainer;\r\n","import styled from 'styled-components';\r\n\r\nconst LoadingContainer = styled.div`\r\n    margin: 165px;\r\n\r\n    & > img {\r\n        width: 50px;\r\n    }\r\n`;\r\n\r\nexport default LoadingContainer;\r\n","import React from 'react';\r\nimport icon from '../img/loading.gif';\r\nimport LoadingContainer from './LoadingContainer';\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <LoadingContainer>\r\n            <img src={icon} alt='Loading' title='Loading...' />\r\n        </LoadingContainer>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport useWeather from '../hooks/useWeather';\r\nimport useReverseGeo from '../hooks/useReverseGeo';\r\nimport moment from 'moment-timezone';\r\nimport WeatherContainer from './WeatherContainer';\r\nimport WeatherInnerContainer from './WeatherInnerContainer';\r\nimport WeatherCard from './WeatherCard';\r\nimport WeatherHeader from './WeatherHeader';\r\nimport WeatherBody from './WeatherBody';\r\nimport WeatherIcon from './WeatherIcon';\r\nimport WeatherIconContainer from './WeatherIconContainer';\r\nimport WeatherMiscContainer from './WeatherMiscContainer';\r\nimport WeatherInfoContainer from './WeatherInfoContainer';\r\nimport WeatherInfoContent from './WeatherInfoContent';\r\nimport WeatherMiscContent from './WeatherMiscContent';\r\nimport WeatherBodyDay from './WeatherBodyDay';\r\nimport WeatherRemoveButton from './WeatherRemoveButton';\r\nimport WeatherRemoveButtonContainer from './WeatherRemoveButtonContainer';\r\nimport Loading from '../loading/Loading';\r\n\r\nexport default function Weather(props) {\r\n    const [location, setLocation] = useState(props.location);\r\n\r\n    const [changeIdentifier, setChangeIdentifier] = useState();\r\n\r\n    const [timeAlpha, setTimeAlpha] = useState(1);\r\n\r\n    const weatherData = useWeather(location, changeIdentifier, props.isSiUnits);\r\n    const geoData = useReverseGeo(location);\r\n\r\n    const removeSelf = () => {\r\n        props.remove(location);\r\n    }\r\n\r\n    const getTimeUntilNextMinute = () => {\r\n        return moment().add(1, 'minute').startOf('minute').add(5, 'seconds').diff(moment());\r\n    }\r\n\r\n    const updateData = () => {\r\n        setChangeIdentifier(moment().format('m'));\r\n\r\n        setTimeout(updateData, getTimeUntilNextMinute());\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLocation(props.location);\r\n\r\n        setTimeout(updateData, getTimeUntilNextMinute());\r\n    }, [props.location]);\r\n\r\n    useEffect(() => {\r\n        if (props.setMainAlpha) {\r\n            props.setMainAlpha(timeAlpha);\r\n        }\r\n    }, [timeAlpha]);\r\n\r\n    useEffect(() => {\r\n        if (weatherData && geoData && (weatherData.error || geoData.error)) {\r\n            removeSelf();\r\n        };\r\n    }, [weatherData, geoData]);\r\n\r\n    if (weatherData && geoData && !weatherData.error && !geoData.error) {\r\n        let { time, temperature, windSpeed, humidity, icon } = weatherData.currently;\r\n\r\n        temperature = Math.round(temperature);\r\n        time = moment.tz(time * 1000, weatherData.timezone);\r\n\r\n        const timeFormat = props.isSiUnits ? 'kk:mm' : 'h:mmA';\r\n        const hourOnlyFormat = props.isSiUnits ? 'kk' : 'hA';\r\n\r\n        const timeString = time.format(timeFormat);\r\n\r\n        const timeHours = time.format('k');\r\n        const alpha = (timeHours < 12 ? timeHours : Math.abs(24 - timeHours)) / 12;\r\n        if (timeAlpha !== alpha) {\r\n            setTimeAlpha(alpha);\r\n        }\r\n\r\n        return (\r\n            <WeatherContainer>\r\n                <WeatherInnerContainer>\r\n                    <WeatherCard alpha={timeAlpha}>\r\n                        <WeatherBody>\r\n                            {\r\n                                geoData.address.city ||\r\n                                geoData.address.water ||\r\n                                geoData.address.state ||\r\n                                geoData.address.county ||\r\n                                geoData.address.suburb ||\r\n                                geoData.address.name ||\r\n                                geoData.name ||\r\n                                geoData.address.village ||\r\n                                geoData.address.road ||\r\n                                geoData.address.country\r\n                            }\r\n                        </WeatherBody>\r\n                        <WeatherHeader>\r\n                            {temperature}°\r\n                        </WeatherHeader>\r\n                        <WeatherBody>\r\n                            {timeString}\r\n                            <WeatherBodyDay>{time.format('dddd')}</WeatherBodyDay>\r\n                        </WeatherBody>\r\n                        <WeatherMiscContainer>\r\n                            <WeatherMiscContent windSpeed={windSpeed} humidity={humidity} isSiUnits={props.isSiUnits} />\r\n                        </WeatherMiscContainer>\r\n                        <WeatherIconContainer>\r\n                            <WeatherIcon icon={icon} />\r\n                        </WeatherIconContainer>\r\n                        {props.removeAble ? (\r\n                            <WeatherRemoveButtonContainer onClick={removeSelf}>\r\n                                <WeatherRemoveButton />\r\n                            </WeatherRemoveButtonContainer>\r\n                        ) : ''}\r\n                    </WeatherCard>\r\n                    <WeatherInfoContainer>\r\n                        <WeatherInfoContent weatherData={weatherData} timeFormat={timeFormat} timeAlpha={timeAlpha} hourOnlyFormat={hourOnlyFormat} />\r\n                    </WeatherInfoContainer>\r\n                </WeatherInnerContainer>\r\n            </WeatherContainer>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <Loading />\r\n        )\r\n    }\r\n}\r\n","import useFetch from './useFetch';\r\n\r\nexport default function useWeather(location, changeIdentifier, isSiUnits) {\r\n    location = location.replace(/\\s/g, '');\r\n\r\n    const unitParam = `?units=${isSiUnits ? 'si' : 'us'}`;\r\n\r\n    const result = useFetch(`${process.env.REACT_APP_WEATHER_URL}/${location}${unitParam}`, changeIdentifier);\r\n\r\n    return result;\r\n}\r\n","import useFetch from './useFetch';\r\n\r\nexport default function useReverseGeo(coords) {\r\n    // Remove spaces and split at ','\r\n    const [lat, lon] = coords.replace(/\\s/g, '').split(',');\r\n\r\n    if (!lat || !lon) {\r\n        return;\r\n    }\r\n\r\n    const result = useFetch(`${process.env.REACT_APP_REVERSE_GEO_URL}&lat=${lat}&lon=${lon}`);\r\n\r\n    return result;\r\n}\r\n","import styled from 'styled-components';\r\nimport { Row } from 'reactstrap';\r\n\r\nconst WeatherCard = styled(Row)`\r\n    width: 100%;\r\n    padding: 0 !important;\r\n    margin: 0 !important;\r\n`;\r\n\r\nexport default WeatherCard;\r\n","import styled from 'styled-components';\r\n\r\nconst WeatherInfoListItem = styled.footer`\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    background-color: #f2f2f2;\r\n    padding: 25px;\r\n    text-align: center;\r\n    color: #666;\r\n    line-height: 2em;\r\n\r\n    & > * {\r\n        display: block;\r\n    }\r\n\r\n    & > a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n`;\r\n\r\nexport default WeatherInfoListItem;\r\n","import React from 'react';\r\nimport FooterContainer from './FooterContainer';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <FooterContainer>\r\n            Adam Bremler © 2019\r\n            <a href='https://darksky.net/poweredby/' target='_blank' rel='noopener noreferrer'>Powered by Dark Sky</a>\r\n        </FooterContainer>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './nav/Nav';\nimport Weather from './weather/Weather';\nimport PageContainer from './PageContainer';\nimport Footer from './footer/Footer';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userLocation: null,\n            mainAlpha: 0.6,\n            locationList: [\n                /* '40.782347, -73.965911',\n                '64.146496, -21.942555',\n                '34.050985, -118.244508',\n                '-41.290375, 174.775558' */\n            ],\n            searchInputError: '',\n            isSiUnits: true\n        }\n    }\n\n    componentDidMount() {\n        navigator.geolocation.getCurrentPosition(pos => {\n            this.setState({ userLocation: `${pos.coords.latitude},${pos.coords.longitude}` });\n        });\n\n        this.loadStoredLocationList();\n    }\n\n    storeLocationList = () => {\n        localStorage.setItem('locationList', JSON.stringify(this.state.locationList));\n    }\n\n    loadStoredLocationList = () => {\n        const stored = localStorage.getItem('locationList');\n        const parsedList = stored ? JSON.parse(stored) : [];\n\n        this.setState({\n            locationList: parsedList\n        });\n    }\n\n    setMainAlpha = mainAlpha => {\n        this.setState({ mainAlpha });\n    }\n\n    addLocation = location => {\n        if (!this.state.locationList.includes(location)) {\n            this.setState(prevState => ({\n                locationList: [...prevState.locationList, location]\n            }), this.storeLocationList);\n        }\n\n        else {\n            this.setSearchInputError('You have already added that location');\n        }\n    }\n\n    removeLocation = location => {\n        this.setState(prevState => ({\n            locationList: prevState.locationList.filter(l => l !== location)\n        }), this.storeLocationList);\n    }\n\n    setSearchInputError = message => {\n        this.setState({\n            searchInputError: message\n        });\n    }\n\n    setSiUnits = value => {\n        this.setState({\n            isSiUnits: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Nav\n                    mainAlpha={this.state.mainAlpha}\n                    addLocation={this.addLocation}\n                    searchInputError={this.state.searchInputError}\n                    setSearchInputError={this.setSearchInputError}\n                    isSiUnits={this.state.isSiUnits}\n                    setSiUnits={this.setSiUnits}\n                    locationList={this.state.locationList}\n                />\n                <PageContainer>\n                    {this.state.userLocation ?\n                        <Weather\n                            key={this.state.userLocation}\n                            location={this.state.userLocation}\n                            setMainAlpha={this.setMainAlpha}\n                            remove={this.removeLocation}\n                            isSiUnits={this.state.isSiUnits}\n                        />\n                        :\n                        null\n                    }\n                    {this.state.locationList.map(location => (\n                        <Weather\n                            key={location}\n                            location={location}\n                            remove={this.removeLocation}\n                            isSiUnits={this.state.isSiUnits}\n                            removeAble\n                        />\n                    ))}\n                </PageContainer>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}